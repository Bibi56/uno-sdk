import static org.gradle.internal.os.OperatingSystem.*

plugins {
    id 'maven'
    id 'java'
    id 'java-library'
    id "org.jetbrains.kotlin.jvm" version "1.3.21"
    id "com.github.johnrengelman.shadow" version '4.0.4'
}

// jitpack
group = 'com.github.kotlin-graphics'

ext{
    moduleName = 'com.github.kotlin_graphics.uno'
    kotlin = 'org.jetbrains.kotlin:kotlin'
    kotlin_version = '1.3.21'
    kotlintest_version = '3.2.1'
//    gln_version = '4cff66c0c1772f8d183436c504b349f34b8db5be'
//    vkk_version = '448bdc596876beab3315d7e883f933fdaca50587'
    lwjgl_version = "3.2.2-SNAPSHOT"
    lwjgl_natives = current() == WINDOWS ? "windows" : current() == LINUX ? "linux" : "macos"
}

dependencies {

    implementation "$kotlin-stdlib-jdk8"
    implementation "$kotlin-reflect"

//    ext.kx = "com.github.kotlin-graphics"
//    api "$kx:gln:$gln_version".toString()
//    api "$kx:vkk:$vkk_version".toString()

//    testImplementation "io.kotlintest:kotlintest-runner-junit5:$kotlintest_version".toString()
//
//    def joglVersion = '2.3.2'
//    testImplementation "org.jogamp.gluegen:gluegen-rt-main:$joglVersion".toString()
//    testImplementation "org.jogamp.jogl:jogl-all-main:$joglVersion".toString()
//
//    ["", "-glfw", "-jemalloc", "-openal", "-opengl", "-stb", "-vulkan", "-jawt"].each {
//        implementation "org.lwjgl:lwjgl$it:$lwjgl_version"
//        if (it != "-vulkan" && it != "-jawt")
//            runtime "org.lwjgl:lwjgl$it:$lwjgl_version:natives-$lwjgl_natives"
//    }
}

allprojects {
    repositories {
        mavenCentral()
        jcenter()
        maven { setUrl("https://oss.sonatype.org/content/repositories/snapshots/") }
        maven { setUrl("https://jitpack.io") }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

jar {
    inputs.property("moduleName", moduleName)
    manifest.attributes('Automatic-Module-Name': moduleName)
}

shadowJar.archiveClassifier = 'all'